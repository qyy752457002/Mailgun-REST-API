docker run -p 5000:80 krismile98/rest-api-recording-email:1.0

-----------------------------------------------------------------------------------------

这个 docker run 命令中的 -p 5000:80 参数实际上是将容器内部的 80 端口映射（或者说转发）到宿主机的 5000 端口。

命令中的 -p 选项用于发布容器的端口到宿主机上。格式为 -p <宿主机端口>:<容器端口>。所以，-p 5000:80 意味着：

宿主机的 5000 端口：这是外部世界（包括你的机器和其他机器）可以访问服务的端口。

容器的 80 端口：这是容器内部运行的服务（在这个案例中是 rest-api-recording-email）监听的端口。

因此，当你在浏览器或者其他客户端中访问 http://localhost:5000 时，Docker 会将这个请求从宿主机的 5000 端口转发到容器的 80 端口。

这使得容器内部的应用可以响应在 80 端口上接收到的请求，而外部用户则是通过 5000 端口与之交互。

-----------------------------------------------------------------------------------------

想象一下你住在一个大楼里，这个大楼的地址是你的宿主机的 IP 地址。现在，这个大楼里有很多公寓，每个公寓都有自己的门牌号。
在这个比喻中，每个公寓就像是一个 Docker 容器，门牌号就相当于容器内部的端口号。

现在，你要给某个公寓（容器）里的朋友（服务）打电话（发送网络请求）。
你不能直接拨打公寓的门牌号（因为外面的世界不认识这个门牌号），所以你需要拨打大楼的电话号码（宿主机的端口）。

`docker run -p 5000:80 rest-api-recording-email` 这条命令就像是告诉大楼的接线员（Docker），当有电话打到大楼的 5000 号（宿主机的 5000 端口）时，应该转接到哪个公寓的哪个门牌号（容器的 80 端口）。

所以，当外部的请求通过宿主机的 5000 端口进来时，Docker 会将这些请求转发到特定容器内部的 80 端口。这就是端口映射，它允许外部设备通过宿主机

的端口与容器内部的服务进行通信。这个过程就像是一个电话交换机，将外面的电话线路（网络连接）接入到正确的公寓（容器）内部。

总结一下，`-p 5000:80` 这个参数的作用是：

- 外部的请求会发送到你的机器的 5000 端口。
- Docker 接收到这个请求后，会在内部把它转发到运行着 `rest-api-recording-email` 服务的容器的 80 端口。
- 对于容器来说，它感知到的是在其80端口上收到了请求，尽管实际上这些请求是从外部的5000端口进来的。
